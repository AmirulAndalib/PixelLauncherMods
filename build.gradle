import org.apache.tools.ant.taskdefs.condition.Os
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.nav_version = "2.9.0"
    repositories {
        google()
    }
    dependencies {
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        classpath 'com.google.android.gms:oss-licenses-plugin:0.10.6'
    }
}

plugins {
    id 'com.android.application' version '8.10.0' apply false
    id 'com.android.library' version '8.10.0' apply false
    id 'org.jetbrains.kotlin.android' version '2.1.0' apply false
    id 'com.google.devtools.ksp' version '2.1.0-1.0.29' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 *  Module building tasks: These tasks build the Magisk module with the overlay stub.
 *  They are dynamic, copying the relevant files from the overlay module into app's assets when done.
 */

task cleanOverlay(type: Delete, dependsOn: ordered(':overlay:clean')) {
    //Delete the previously built APK to start fresh
    delete 'overlay/module/system/product/overlay/PixelLauncherModsOverlay.apk'
}

/**
 *  Using `:overlay:assembleRelease` does not seem to work from the Studio-embedded Gradle.
 *  Instead, we spawn a separate gradle for this small task.
 */
task assembleGradleDaemon(type: Exec) {
    String gradleWrapper = ""
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        gradleWrapper = "gradlew.bat"
    }else{
        gradleWrapper = "./gradlew"
    }
    workingDir "$projectDir"
    commandLine gradleWrapper, ':overlay:assembleRelease'
}

task buildAndCopyOverlay(type: Copy, dependsOn: ordered(':assembleGradleDaemon')) {
    //Copy built APK into module folder
    from "overlay/build/outputs/apk/release/overlay-release.apk"
    into "overlay/module/system/product/overlay"
    rename("overlay-release.apk", "PixelLauncherModsOverlay.apk")
}

task zipModule(type: Zip) {
    //Zip up the module, copying it into the assets of the app
    archiveFileName = "module.zip"
    destinationDirectory = file("app/src/main/assets/overlay")
    from "overlay/module"
}

task copyManifest(type: Copy) {
    //Copy the current Manifest file into the assets for dynamic building
    from "overlay/src/main/AndroidManifest.xml"
    into "app/src/main/assets/overlay/build"
}

task createModule(dependsOn: ordered(':cleanOverlay', ':buildAndCopyOverlay', ':zipModule', ":copyManifest")) {
    println "Building Module..."
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect {tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}